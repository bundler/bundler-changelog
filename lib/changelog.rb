require 'date'
require 'pathname'

class Changelog
  attr_reader :releases
  def initialize
    @releases = []
  end

  def write(to: STDOUT)
    to.puts '/* This file is automatically generated from https://github.com/bundler/bundler-changelog */'
    releases.sort.reverse_each do |release|
      to.puts
      to.print "## #{release.version}"
      to.print " (#{release.date.strftime('%Y-%m-%d')})" if release.date
      to.puts

      release.sections.reject! { |s| s.entries.empty? }
      release.sections.sort_by(&:sort_index).each do |section|
        to.puts
        to.puts "#{section.name}:"
        to.puts
        section.entries.each do |entry|
          to.print '  - '
          to.print entry.message
          details = entry.issues.map do |i| 
            i = i.sub(/^#/, '')
            "[##{i}](https://github.com/bundler/bundler/issues/#{i})"
          end
          details += entry.authors.map { |a| "@#{a}" }
          to.print " (#{details.join(', ')})" unless details.empty?
          to.puts
        end
      end

      if release.sections.empty?
        to.puts
        to.puts 'This space intentionally left blank.'
      end
    end
  end

  def entries
    releases.sort.flat_map(&:sections).flat_map(&:entries)
  end
end

Release = Struct.new(:version, :date) do
  def <=>(other)
    version <=> other.version
  end

  def sections
    @sections ||= []
  end
end

Section = Struct.new(:name) do
  include Comparable

  def entries
    @entries ||= []
  end

  def sort_index
    order = %w[
      Performance
      Security
      Workarounds
      Changes
      Features
      Bugfixes
      Bugfix
      Documentation
      Removed
      "Features"
      "Bugfixes"
      Features(?)
      Bugfixes\ from\ v1.7.13
      Deprecations
    ]

    order.index(name) || abort("undefined section #{name}")
  end
end

Entry = Struct.new(:pr, :release, :section, :issues, :authors, :message)

class Changelog
  def self.from_csv(dir)
    changelog = Changelog.new
    releases = {}
    CSV.table(dir / 'releases.csv').each do |release|
      date = release[:date]
      release = Release.new(Gem::Version.new(release[:version]), date && Date.parse(date))
      changelog.releases << release
      releases[release.version.to_s] = release
    end

    sections = Hash.new do |h, k|
      s = Section.new(k.last)
      k.first.sections << s
      h[k] = s
    end

    CSV.table(dir / 'changes.csv').each do |entry|
      next unless release = entry[:release]
      release = releases.fetch(release)
      section = sections[[release, entry[:section]]]
      issues = String(entry[:issues]).split('|')
      authors = String(entry[:authors]).split('|')
      entry = Entry.new(entry[:pr], release, section, issues, authors, entry[:message])
      section.entries << entry
    end

    changelog
  end
end
